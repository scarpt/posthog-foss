#
# `docker-compose` file used ONLY for hobby deployments.
#
# Please take a look at https://posthog.com/docs/self-host/deploy/hobby
# for more info.
#
# PostHog has sunset support for self-hosted K8s deployments.
# See: https://posthog.com/blog/sunsetting-helm-support-posthog
#

services:
    objectstorage:
        extends:
            file: docker-compose.base.yml
            service: objectstorage
        volumes:
            - objectstorage:/data

    db:
        extends:
            file: docker-compose.base.yml
            service: db
        # Pin to postgres 12 until we have a process for pg_upgrade to postgres 15 for exsisting installations
        image: ${DOCKER_REGISTRY_PREFIX:-}postgres:12-alpine
        volumes:
            - postgres-data:/var/lib/postgresql/data

    redis:
        extends:
            file: docker-compose.base.yml
            service: redis
        volumes:
            - redis-data:/data

    redis7:
        extends:
            file: docker-compose.base.yml
            service: redis7
        volumes:
            - redis7-data:/data

    clickhouse:
        #
        # Note: please keep the default version in sync across
        #       `posthog` and the `charts-clickhouse` repos
        #
        image: clickhouse/clickhouse-server:22.3.4.20
        restart: on-failure
        depends_on:
            - kafka
            - zookeeper
        volumes:
            - ./posthog/posthog/idl:/idl
            - ./posthog/docker/clickhouse/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
            - ./posthog/docker/clickhouse/config.xml:/etc/clickhouse-server/config.xml
            - ./posthog/docker/clickhouse/users.xml:/etc/clickhouse-server/users.xml
            - clickhouse-data:/var/lib/clickhouse
    zookeeper:
        extends:
            file: docker-compose.base.yml
            service: zookeeper
        volumes:
            - zookeeper-datalog:/datalog
            - zookeeper-data:/data
            - zookeeper-logs:/logs
    kafka:
        extends:
            file: docker-compose.base.yml
            service: kafka
        depends_on:
            - zookeeper
        environment:
            KAFKA_LOG_RETENTION_MS: 3600000
            KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 300000
            KAFKA_LOG_RETENTION_HOURS: 1
        volumes:
            - kafka-data:/bitnami/kafka

    worker:
        extends:
            file: docker-compose.base.yml
            service: worker
        environment:
            SENTRY_DSN: 'https://public@sentry.example.com/1'
            SITE_URL: https://posthog.sharpi.ai  
            SECRET_KEY: 0d4eebbee4f47f369a009acf99f5316c7709680eeccc4aa32e610671
            OBJECT_STORAGE_ACCESS_KEY_ID: 'object_storage_root_user'
            OBJECT_STORAGE_SECRET_ACCESS_KEY: 'object_storage_root_password'
            OBJECT_STORAGE_ENDPOINT: http://objectstorage:19000
            OBJECT_STORAGE_ENABLED: true
            ENCRYPTION_SALT_KEYS: 692e0ccdca87ab0c5d6ebc5e566de512a9038c40ef2c7fc26c995f7da07cc039
        image: posthog/posthog-foss:latest
    web:
        extends:
            file: docker-compose.base.yml
            service: web
        command: /compose/start
        volumes:
            - ./compose:/compose
        image: posthog/posthog-foss:latest
        environment:
            SENTRY_DSN: 'https://public@sentry.example.com/1'
            SITE_URL: https://posthog.sharpi.ai  
            SECRET_KEY: 0d4eebbee4f47f369a009acf99f5316c7709680eeccc4aa32e610671
            OBJECT_STORAGE_ACCESS_KEY_ID: 'object_storage_root_user'
            OBJECT_STORAGE_SECRET_ACCESS_KEY: 'object_storage_root_password'
            OBJECT_STORAGE_ENDPOINT: http://objectstorage:19000
            OBJECT_STORAGE_ENABLED: true
            ENCRYPTION_SALT_KEYS: 692e0ccdca87ab0c5d6ebc5e566de512a9038c40ef2c7fc26c995f7da07cc039
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.posthog.rule=Host(`posthog.sharpi.ai`)"
            - "traefik.http.routers.posthog.entrypoints=websecure"
            - "traefik.http.routers.posthog.tls.certresolver=letsencrypt"
            - "traefik.http.services.posthog.loadbalancer.server.port=8000"
        depends_on:
            - db
            - redis
            - clickhouse
            - kafka
            - objectstorage

    plugins:
        extends:
            file: docker-compose.base.yml
            service: plugins
        image: posthog/posthog-foss:latest
        environment:
            SENTRY_DSN: 'https://public@sentry.example.com/1'
            SITE_URL: https://posthog.sharpi.ai  
            SECRET_KEY: 0d4eebbee4f47f369a009acf99f5316c7709680eeccc4aa32e610671
            OBJECT_STORAGE_ACCESS_KEY_ID: 'object_storage_root_user'
            OBJECT_STORAGE_SECRET_ACCESS_KEY: 'object_storage_root_password'
            OBJECT_STORAGE_ENDPOINT: http://objectstorage:19000
            OBJECT_STORAGE_ENABLED: true
            CDP_REDIS_HOST: redis7
            CDP_REDIS_PORT: 6379
            ENCRYPTION_SALT_KEYS: 692e0ccdca87ab0c5d6ebc5e566de512a9038c40ef2c7fc26c995f7da07cc039
        depends_on:
            - db
            - redis
            - redis7
            - clickhouse
            - kafka
            - objectstorage

    asyncmigrationscheck:
        extends:
            file: docker-compose.base.yml
            service: asyncmigrationscheck
        image: posthog/posthog-foss:latest
        environment:
            SENTRY_DSN: 'https://public@sentry.example.com/1'
            SITE_URL: https://posthog.sharpi.ai  
            SECRET_KEY: 0d4eebbee4f47f369a009acf99f5316c7709680eeccc4aa32e610671
            SKIP_ASYNC_MIGRATIONS_SETUP: 0

    # Temporal containers
    temporal:
        extends:
            file: docker-compose.base.yml
            service: temporal
        environment:
            - ENABLE_ES=false
        ports:
            - 7233:7233
        volumes:
            - ./posthog/docker/temporal/dynamicconfig:/etc/temporal/config/dynamicconfig
    elasticsearch:
        extends:
            file: docker-compose.base.yml
            service: elasticsearch
    temporal-admin-tools:
        extends:
            file: docker-compose.base.yml
            service: temporal-admin-tools
        depends_on:
            - temporal
    temporal-ui:
        extends:
            file: docker-compose.base.yml
            service: temporal-ui
        ports:
            - 8081:8080
        depends_on:
            temporal:
                condition: service_started
            db:
                condition: service_healthy
    temporal-django-worker:
        command: /compose/temporal-django-worker
        extends:
            file: docker-compose.base.yml
            service: temporal-django-worker
        volumes:
            - ./compose:/compose
        image: posthog/posthog-foss:latest
        environment:
            SENTRY_DSN: 'https://public@sentry.example.com/1'
            SITE_URL: https://posthog.sharpi.ai  
            SECRET_KEY: 0d4eebbee4f47f369a009acf99f5316c7709680eeccc4aa32e610671
        depends_on:
            - db
            - redis
            - clickhouse
            - kafka
            - objectstorage
            - temporal

volumes:
    zookeeper-data:
    zookeeper-datalog:
    zookeeper-logs:
    objectstorage:
    postgres-data:
    clickhouse-data:
    redis-data:
    redis7-data:
    kafka-data:

networks:
    default:
    coolify-network:
        external: true
